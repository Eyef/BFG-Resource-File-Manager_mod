DOOM 3 BFG Edition .bimage specification

|Byte       |Size                |Swaped|Description                               |
|-----------|:------------------:|:----:|-----------------------------------------:|
|0x0        |8                   | Yes  |Timestamp                                 |
|0x8        |4                   | Yes  |The file's "magic" identifier (BIM10)     |
|0x12       |4                   | Yes  |Texture Type                              |
|0x16       |4                   | Yes  |Texture Format                            |
|0x20       |4                   | Yes  |Color Format                              |
|0x24       |4                   | Yes  |Texture Width                             |
|0x28       |4                   | Yes  |Texture Height                            |
|0x32       |4                   | Yes  |Number of Levels                          |


For each Level data are using the following specification
|Byte             |Size           |Swaped|Description                    |
|-----------------|:-------------:|:----:|------------------------------:|
|0x0              |4              | Yes  |Level                          |
|0x4              |4              | Yes  |Z-index                        |
|0x8              |4              | Yes  |Image Width                    |
|0x12             |4              | Yes  |Image Height                   |
|0x16             |4              | Yes  |Image Data Size(datasize)      |
|0x20             |datasize       | No*  |Image Data                     |

On both tables if swaped is 'Yes' it means that the first half and last half of bytes are switched between them.

Most Textures are encoded with s3tc_DXT5, but some might be encoded with RGB565 (or other supported formats).
For Cubic TextureType (aka Cube Maps) it enforces an x6 number of levels, even if the file has less than 6 levels.
The "magic" identifier is a numerical value and not a string value.

For RGB565 the imagedata are swapped per pixel and the proper way to reverse the encooding is by using the following:
RED color = ((Pixel >> 11) & 31 ) << 3
GREEN Color = ((Pixel >> 5) & 63 ) << 2
BLUE Color = ( Pixel & 31 ) << 3
Where "& number" is seting the maximum numerical value the expected sequence of bits we want to extract, << & >> are used to left and Right shift the value.
The RGB565 have no Alpha channel and therefor it's expected to have no transparency

*. On RGB565 Formats the data per 2 bytes are swapped.
